---
title: "BIO00066I Workshop 4"
subtitle: "Cell Biology Data Analysis Workshop 4"

author: Daniel Jeffares
date: 2024-03-16
format:
    html:
        code-link: true
        toc: true
        number-sections: true
        toc-location: right
        toc-depth: 2
        
editor: source
---

::: callout-warning
## This workshop is a work in progress.
At the moment, is it incomplete, and will contain errors.
:::

# Learning objectives

::: callout-important
## Philosophy

-   **Workshops are not a test.**
-   Don't worry about making mistakes.
-   The staff are here to help.
:::

## Technical skills

Today, we will learn how to:

-   Use a linear model to predict some ***y*** values, given some ***x*** values
-   In our case we use absorbance (***x*** **values**) to predict alkaline phosphatase activity (***y*** **values**)
-   Make **animated plots**
-   Use multiple test correction

## Thinking like a data scientist

It might seem like a lot of trouble to use **R** to read in a small number of ***x*** and ***y*** values from an Excel sheet to a standard curve, and then estimate some new ***y*** values. We *could* probably do this in Excel.

But what if we have 200 standard curves, and we want o automate the process? What if we have 50,000 ***x*** and ***y*** values and a non-linear model? For big data, **R is the only sensible way**. There are [other software tools for statitical analysis](https://www.inwt-statistics.com/blog/comparison-of-r-python-sas-spss-and-stata), but we don't teach them here.

# Introduction

## The biology

We saw in workshop 3 that clone A moves faster than clone B. This time we will use R to explore MCS cell movement in more depth. Use ***x*** and ***y*** coordinates from *manually* tracked cells. We have 10 manually tracked cell lineages of clone A and 9 manually tracked cell lineages of clone B. Today, we will explore the ways these lineages move.

![**Figure 1.** The **tracking ID (TID)** is a unique ID that the microscope assigned to each object (cell), as it tracks it through time. The **lineage ID (LID)** is a number assigned to the ‘family’ of cells that derived by cell division during the the experiment. When a cell divides, each daughter cell is given a new tracking ID, but they keep their lineage ID, because they are still part of the same family.](docs/figure1.jpg)

To help address our research question of whether morphology and migration can be used to predict MSC phenotype, we also need to investigate the phenotype (ability to differentiate) of the two clonal lines. In practical 4 we'll explore the potency of the two clonal lines by looking at their capacity to undergo *osteogenesis* (differentiate into osteoblasts - bone cells) when they are given an inductive media.

We can use an enzyme called *alkaline phosphatase* as a biomarker to quantify osteogenesis in the cells, as the activity of the enzyme increases in cells undergoing osteogenesis as osteoblasts use the enzyme when producing bone extracellular matrix. To measure the activity of the enzyme we mix the lysate (cellular contents) of the cells with the substrate for the enzyme, para-nitrophenyl phosphate (pNPP) and measure the rate of product formation over time. The product of the reaction is para-nitro phenol (pNP) and we can measure it *colorimetrically* as it absorbs light at a known wavelength.

Creating a standard curve and estimating values from this curve is *Part 1* of our analysis today. *Part 2* is looking at cell movement data.

::: callout-note
## Same coding methods, different data

The methods we use to examine cells moving on *x* and *x* coordinates would be used any location data that tracks objects objects in a two-dimensional plane over time; traffic, birds, slugs, people*.* with consent
:::

## Research questions

-   What is the osteogenic potential of clonal lines A and B (Part 1)
-   Can we see differences in how clonal lines A and B move?
-   How can we display this data visually?
-   Do cells 'follow' each other in the petri dish?

## The data

### Part 1: pNP absorbance values

Once you've completed Practical 4 you'll have your own data to use to make the standard curve of pNP and absorbance values for each of the clonal line time points. You should use your own standard curve data from the practical as well as your unknown values as the readings for absorbance will vary based on the plate the samples are in and the plate reader used.

To create the standard curve you have the absorbance readings for 8 concentrations of pNP in triplicate. To measure osteogenesis in the two clonal lines, samples of the cells were grown in an inductive media for 8 days. The cells were then lysed at different time points to measure the quantity of alkaline phosphatase and explore how it varies over time and between the two clonal lines. The clonal lines were analysed at Day 0, Day 4 and Day 8. At each time point you have data for both induced cells and non-induced cells (negative control), with the exception of Day 0 as the differentiation was induced at Day 1. There are four repeated measures for the data at each time point.

### Part 2: manually-tracked cell movement 'point' data

The Livecyte data that tracked cells automatically was unreliable. In [workshop 3](https://djeffares.github.io/BIO66I/workshop3.html#manual-tracking-data) we looked at some manual tracking data. This contained information like `track.length`, the `meandering.index`, `euclidean.distance` and so on. This time we look at manual data in it's raw form: ***x*** and ***y*** coordinates of the cells, tracked over time.

We can of course extract information from this about how far the cells travel, and how fast they travel (because we have distance and time measurements). But, we can do much more. This time we will be able to visualise the paths they take in culture dish. We may observe interesting patterns by studying this data.

# Exercises (Part 1): Standard curve

To quantify the concentration of pNP and therefore the activity of the enzyme in unknown samples we'll create a standard curve of known values of pNP and then interpolate the unknown pNP values in our sample from this.

## Load libraries (install packages)

```{r}
#| echo: true
#| warning: false
#| eval: true

rm(list=ls())
library(tidyverse)
library(readxl)
library(ggpubr)
#install.packages("gganimate")
library(gganimate)
```

## Load data

First, read in some ata from an Excel file. You can obtain [an example file from here](https://djeffares.github.io/BIO66I/example_alkaline_phosphatase_activity_assay.xlsx). Click to download, and then save the file in your **raw-data** directory. If you dno't have a **raw-data** directory, make one!

Then read in the Excle file:

```{r}
#| echo: true
#| warning: false
#| eval: true
ap<-read_excel("raw-data/example_alkaline_phosphatase_activity_assay.xlsx", sheet=2, skip=3)

#check what we have
view(ap)
```

Then simplify the data with `pivot_longer`:

```{r}
#| echo: true
#| warning: false
#| eval: true
ap.pivot <- 
  ap |> 
  select(-mean.abs, -standard.deviation) |>
  pivot_longer(-pNPP.conc, names_to = "rep", values_to = "absorb")
view(ap.pivot)
```

Reorder the columns, so it is more intuitive for us using `relocate`:

```{r}
#| echo: true
#| warning: false
#| eval: true
ap.pivot <- relocate(ap.pivot, absorb)
```

## Plot enzyme data

Let's make a simple plot, adding a line that shows the linear model with the line `geom_smooth(method="lm")`. The `method="lm` means plotting a linear model.

```{r}
#| echo: true
#| warning: false
#| eval: true

#plot, saving thr plot in an object called 'pNPP.plot'
pNPP.plot <- ap.pivot |>
  ggplot(aes(x=absorb, y=pNPP.conc))+
  geom_point()+
  geom_smooth(method="lm")

#show the plot
pNPP.plot
```

Now save the plot:

```{r}
#| echo: true
#| warning: false
#| eval: true

ggsave("pNPP.plot.pdf",pNPP.plot)  
```

::: callout-note
# Optional: How close are the replicates? 

How similar to the linear models look if you use: `ggplot(aes(x=absorb, y=pNPP.conc,colour = rep))`
:::

## Make and use a linear model

```{r}
#| echo: true
#| warning: false
#| eval: true

linear_model <- lm(pNPP.conc ~ absorb , data = ap.pivot)
absorbance_values <- data.frame(absorb = c(1,2,3))
```

Now we have the linear model, if we have some some absorbence values, we can make a prediction of some pNPP concentrations. Here is how do it, using the `predict` function:

```{r}
#| echo: true
#| warning: false
#| eval: false

#calculate predicted pNPP concentrationusing the linear model
predicted.pnpp.concs <- predict(linear_model,absorbance_values)

#show the values
predicted.pnpp.concs
```


---


# Exercises (Part 2): Exploring MCS movement

## Loading data

First, load the data from the website, and check what you have:

```{r}
#| echo: true
#| warning: false
#| eval: false

#load data from a URL
points<-read_csv(url("https://djeffares.github.io/BIO66I/points.data.2024-03-16.csv"),
                 col_types = cols(LID = col_factor(),TID = col_factor(),pid = col_factor())
)

#check what we have
glimpse(points)
head(points)

```

## What is in the 'point' data?

This data contains the positions of cells, tracked over time. Lineages are tracked. We have data for tracked cells for both clones (A and B). We have the following information, for many time points:

-   lineage ID (LID)
-   tracking ID (TID)
-   something (pid)
-   the location of the cell in *x* and *y* coordinates (x.position, y.position)
-   the time point (time)
-   movement metrics (track.length, euclidean.distance, velocity)
-   a new movement metric: howfar the cell moved between this time ppint, and thr last one (jump.distance)
-   clone (A/B)

## Exploratory plots

### Recap: how fast do they move

You'll notice that this file has velocity, just like the last file we used in workshop 3. For a simple 'sanity check', we will tests again that the clones differ. 

:::callout-caution
**We know that clone A moves faster than clone B. So why do it again?**

**Answer:** data hygiene. We want to be very sure our data is good.
:::

```{r}
#| echo: true
#| warning: false
#| eval: false
points |>
  ggplot(aes(x=clone,y=log10(velocity)))+
  geom_violin()+
  stat_compare_means()
```

### Plotting cell movement tracks

Now, let's examine the directions do the cells move in. A simple way to do this is to plot the *x* and *y* coordinates. We will use `facet_wrap` to plot one boz for each lineage ID `LID`. Remember, a lineage ID contains information for each cell, and all its daughter cell and so on. 

To keep our image simple, we allow clone A and clone B to be on the same panels. But note that **clone A, lineage ID 1** has no relationship to **clone A, lineage ID 2** - they are merely the first lineage ID that Amanda tracked.

```{r}
#| echo: true
#| warning: false
#| eval: false

points |>
  ggplot(aes(x=x.position,y=y.position,colour=clone))+
  geom_point(size=1)+
  facet_wrap(~LID)

#If we want to show just one clone add this line after 'points |>'
#filter(clone == "A")|>
```

We can see that they wriggle about quiet a lot. They do not move in straight lines.


show one lineage, from one clone and colour by TID (or time)

```{r}
#| echo: true
#| warning: false
#| eval: false

points |>
  filter(clone == "B" & LID==4)|>
  ggplot(aes(x=x.position,y=y.position,colour=TID))+
  geom_point(size=1)
  #colour=time
```

## Rose plots

Rose plot to summarise how **far** cells move.

rose plot: adjust so the median of mean_x_mm is zero and mean_y_mm is zero ie: centralize all the values

```{r}
#| echo: true
#| warning: false
#| eval: false
points2<- points |> 
  group_by(LID) |> 
  mutate(med.x = mean(x.position, na.rm = TRUE))|>
  mutate(adjusted.x =  x.position - med.x) |>
  mutate(med.y = mean(y.position, na.rm = TRUE))|>
  mutate(adjusted.y =  y.position - med.y)
points2
```

make a rose plot

```{r}
#| echo: true
#| warning: false
#| eval: false
points2 |>  
  ggplot(aes(x=adjusted.x,y=adjusted.y,colour = time))+
  geom_point(alpha=0.5, size=3)+
  geom_hline(yintercept = 0)+
  geom_vline(xintercept = 0)+
  facet_wrap(~clone)
```

## Animate it!

let's animate this

create the static plot

```{r}
#| echo: true
#| warning: false
#| eval: false
static.plot <-points |>
  filter(clone == "B", LID == 1) |>
  ggplot(aes(x=x.position,y=y.position, colour=TID))+
  geom_point(size=10, pch=1)
static.plot
```

try alternatives

-   `filter(clone == "B")`
-   `facet_wrap(~LID)`
-   `geom_point(size=5, pch=1)`

animate the plot

```{r}
#| echo: true
#| warning: false
#| eval: false
animated.plot <- static.plot +
  transition_time(time) +
  shadow_mark(past = T, future=F, alpha=0.5)

#amimate it!
animate(animated.plot, width =800, height = 800)

#save as gif
anim_save("clineB.ineage2gif", animated.plot)
```

## Do they follow each other

TBA

# Reflection

# After the workshop

## Consolodation exercises

Optional

## Planning for your report
